version: '3.7'

services:
  traefik:
    image: traefik:v2.4
    container_name: traefik
    env_file:
      - .env
    volumes:
     #- ./traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/letsencrypt
    networks:
      - main
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`traefik.$DOMAIN`)'
      - 'traefik.http.routers.api.entrypoints=http,https'
      - 'traefik.http.routers.api.service=api@internal'
      - 'traefik.http.routers.api.tls=true'
      - 'traefik.http.routers.api.tls.certresolver=acmec'
      - 'traefik.http.routers.api.tls.options=default'
    ports:
      - 80:80
      - 443:443
    command:
      - '--api'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--entrypoints.http=true'
      - '--entrypoints.http.address=:80'
      - '--entrypoints.http.http.redirections.entrypoint.to=https'
      - '--entrypoints.http.http.redirections.entrypoint.scheme=https'
      - '--entrypoints.https=true'
      - '--entrypoints.https.address=:443'
      - '--log=true'
      - '--log.level=INFO'
      - '--certificatesresolvers.acmec.acme.email=${ACME_EMAIL}'
      - '--certificatesresolvers.acmec.acme.httpchallenge=true'
      - '--certificatesresolvers.acmec.acme.httpchallenge.entrypoint=http'
      - '--certificatesresolvers.acmec.acme.storage=/letsencrypt/acme.json'
  app:
    image: ${IMAGE}
    pull_policy: if_not_present
    command: sh -c "python manage.py collectstatic --noinput && python manage.py migrate && daphne -b 0.0.0.0 -p 8000 spoonbill_web.asgi:application"
    container_name: app
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.app.rule=Host(`$API_DOMAIN`)'
      - 'traefik.http.routers.app.entrypoints=http,https'
      - 'traefik.http.routers.app.tls=true'
      - 'traefik.http.routers.app.tls.certresolver=acmec'
      - 'traefik.http.routers.app.tls.options=default'
    depends_on:
      - postgres
      - redis
      - traefik
    ports:
      - "8000:8000"
    hostname: app
    env_file:
      - .env
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=$API_DOMAIN
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - CELERY_BROKER=redis://redis:6379/0
    networks:
      - main
    volumes:
      - temporary-data:/tmp
    restart: on-failure
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:latest
    env_file:
      - .env
    networks:
      - main
    restart: on-failure
    volumes:
      - postgresql-data:/var/lib/postgresql/data
  redis:
    container_name: redis
    hostname: redis
    image: redis:latest
    networks:
      - main
    restart: on-failure
  celery_worker:
    image:  ${IMAGE}
    command: celery -A spoonbill_web worker -l INFO --concurrency=4
    container_name: celery_worker
    env_file:
      - .env
    environment:
      - DEBUG=1
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - CELERY_BROKER=redis://redis:6379/0
    depends_on:
      - app
      - postgres
      - redis
    volumes:
      - temporary-data:/tmp
    hostname: celery_worker
    networks:
      - main
    restart: on-failure
  celery_beat:
    image: ${IMAGE}
    command: celery -A spoonbill_web beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    container_name: celery_beat
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - CELERY_BROKER=redis://redis:6379/0
    depends_on:
      - app
      - postgres
      - redis
    hostname: celery_beat
    networks:
      - main
    restart: on-failure
  front:
    image: ${FRONT_IMAGE}
    container_name: front
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.site.rule=Host(`$DOMAIN`)'
      - 'traefik.http.routers.site.entrypoints=http,https'
      - 'traefik.http.routers.site.tls=true'
      - 'traefik.http.routers.site.tls.certresolver=acmec'
      - 'traefik.http.routers.site.tls.options=default'
      - 'traefik.http.middlewares.redirect.redirectregex.regex=^https://$OLD_DOMAIN/(.*)'
      - 'traefik.http.middlewares.redirect.redirectregex.replacement=https://$DOMAIN/$${1}'
      - 'traefik.http.routers.oldsite.rule=Host(`$OLD_DOMAIN`)'
      - 'traefik.http.routers.oldsite.entrypoints=http,https'
      - 'traefik.http.routers.oldsite.tls=true'
      - 'traefik.http.routers.oldsite.tls.certresolver=acmec'
      - 'traefik.http.routers.oldsite.tls.options=default'
      - 'traefik.http.routers.oldsite.middlewares=redirect@docker'
    ports:
      - "88:88"
    env_file:
      - .env
    depends_on:
      - app
    hostname: front
    networks:
      - main
    restart: on-failure

networks:
  main:

volumes:
  postgresql-data:
  temporary-data:
